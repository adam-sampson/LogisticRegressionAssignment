setcolorder(geo.dt,c(1:33,37,34:36,38:100))
length(geo.dt)
geo.dt[,101]
setcolorder(geo.dt,c(1:33,37,34:36,38:101))
geo.dt[ , FMHH0 := FMHH0 / TOTHH0]
geo.dt[ , NFMHH0 := 1 - FMHH0]
View(geo.dt)
geo.dt[ , NOFMHH0 := 1 - FMHH0]
View(geo.dt)
sum(geo.dt[1,TT8GR0:TTGRAD0])
geo.dt[ , names(geo.dt)[40:46] := .SD / EDUCAT0, .SDcols = names(geo.dt)[40:46]]
sum(geo.dt[1,c(48:63)])
geo.dt[ , c(48:63) := .SD / HHINCOM0, .SDcols = c(48:63)]
View(geo.dt)
geo.dt[ , c(69:71) := .SD / ACSTOTHU, .SDcols = c(69:71)]
geo.dt[1:5,ACSAVGHHSZ]
geo.dt[ , ACSAVGHHSZ := lapply(ACSAVGHHSZ,scale)]
geo.dt[1:5,ACSAVGHHSZ]
geo.dt[ , ACSAVGHHSZ := scale(ACSAVGHHSZ)]
geo.dt[1:5,ACSAVGHHSZ]
unscale(geo.dt[1:5,ACSAVGHHSZ])
unscale <- function(in.vec) {
return(in.vec * attr(in.vec, 'scaled:scale') + attr(in.vec,'scaled:center'))
}
unscale(geo.dt[1:5,ACSAVGHHSZ])
sum(geo.dt[1,S1UNITD0:S20UNITS0])
geo.dt[ , c(76:81) := .SD / UNITS0, .SDcols = c(76:81)]
geo.dt[ , MDYRBLT0 := scale(MDYRBLT0)]
geo.dt[ , c(84:90) := .SD / VALOWNR0, .SDcols = c(84:90)]
geo.dt[ , MEDVALO0 := scale(MEDVALO0)]
geo.dt[ , AGGVALO0 := scale(AGGVALO0)]
geo.dt[ , c(94:100) := .SD / GROSSRNT0, .SDcols = c(94:100)]
geo.dt[ , MDGRSRN0 := scale(MDGRSRN0)]
rm(col)
attr(geo.dt[1,])
attr(geo.dt[1,], 'scaled:scale')
attr(geo.dt[,1], 'scaled:scale')
attr(geo.dt[,2], 'scaled:scale')
attr(geo.dt[,72], 'scaled:scale')
attr(geo.dt[,71], 'scaled:scale')
attr(geo.dt[,73], 'scaled:scale')
geo.dt[ , LANDAREA := scale(LANDAREA)]
attr(geo.dt[,2], 'scaled:scale')
geo.dt[,2]
geo.dt$LANDAREA
attr(geo.dt$LANDAREA, 'scaled:scale')
attr(geo.dt$LANDAREA, 'scaled:scal')
attr(geo.dt$LANDAREA, 'scaled')
attr(geo.dt$LANDAREA, 'a:a')
attr(geo.dt$LANDAREA, 'scaled:scaledsa')
attr(geo.dt$LANDAREA, 'scaled:scaled')
attr(geo.dt$LANDAREA, 'scaled:scale')
attr(geo.dt[[2]], 'scaled:scale')
unscale <- function(in.vec) {
if(is.null(attr(in.vec, 'scaled:scale')==FALSE)) {
return(in.vec * attr(in.vec, 'scaled:scale') + attr(in.vec,'scaled:center'))
} else {
return(in.vec)
}
}
print(paste("Took",Sys.time()-start_time,"time to complete."))
start_time <- Sys.time()
print(paste("Took",Sys.time()-start_time,"time to complete."))
##########
# Fall 2017, Bellarmine University MSA
# Logistic Regression and PCA Analysis Assignment
# Student: Adam Sampson
##########
library(data.table)
library(lubridate)
start_time <- Sys.time()
sol.dt <- fread("MarketingCampaignSolicitations.txt",sep="\t",header=TRUE)
geo.dt <- fread("MarketingCampaignGeo+LandArea.txt",sep="\t",header=TRUE)
geokey.dt <- fread("GeoKey.txt",sep="\t",header=FALSE)
summary(sol.dt)
# MSRP from 300 to 6840
# OfferPrice from 60 to 70
# Two dates, Three Product Information Characters, and One record ID.
summary(geo.dt)
# Census data is in counts per block group.
# Ages have overlapping categories
# Create an unscale function to help interpret scaled data.
unscale <- function(in.vec) {
if(is.null(attr(in.vec, 'scaled:scale')==FALSE)) {
return(in.vec * attr(in.vec, 'scaled:scale') + attr(in.vec,'scaled:center'))
} else {
return(in.vec)
}
}
#---
# Convert marketing results data and/or scale it.
#---
# Convert dates to date format
dateVars <- c("MailDate","PurchaseDate")
sol.dt[ , (dateVars) := lapply(.SD,parse_date_time,c('ymd HMS')), .SDcols = dateVars]
rm(dateVars)
# Scale variables that should be scaled
# print(sol.dt$MSRP[1])
varToScale <- c("MSRP",
"OfferPrice")
sol.dt[ , (varToScale) := lapply(.SD,scale), .SDcols = varToScale]
rm(varToScale)
# print(sol.dt$MSRP[1])
# print(unscale(sol.dt$MSRP)[1])
#---
# Convert census variables to either percents or scales
#---
# Scale land area
geo.dt[ , LANDAREA := scale(LANDAREA)]
# Convert RecordNumber to character in census data
geo.dt[ , RecordNumber := as.character(RecordNumber)]
# Convert all numbers in census data to num and not a mix of num and int
geo.dt[ , names(geo.dt)[-1] := lapply(.SD,as.numeric), .SDcols = names(geo.dt)[-1]]
# Columns 4: 14 are the age count columns
geo.dt[ , names(geo.dt)[4:14] := .SD / ACSTTPOP0, .SDcols = names(geo.dt)[4:14]]
# geo.dt[1:10 , c(4,6:14)]
# rm(ageVars)
# Calculate male percent based on formula, but then can't use same formula for female
geo.dt[ , ACSMALES := ACSMALES / (ACSMALES + ACSFEMALES)]
geo.dt[ , ACSFEMALES := 1 - ACSMALES]
# Columns 18:21 are marital status
geo.dt[ , names(geo.dt)[18:21] := .SD / MARSTAT0, .SDcols = names(geo.dt)[18:21]]
# Columns FMHH0 and NFMHH0 add up to TOTHH0, but they are in a strange order
setcolorder(geo.dt,c(1:33,37,34:36,38:101))
geo.dt[ , FMHH0 := FMHH0 / TOTHH0]
geo.dt[ , NOFMHH0 := 1 - FMHH0]
# Columns 40:46 add up to EDUCAT0 column 39
geo.dt[ , c(40:46) := .SD / EDUCAT0, .SDcols = c(40:46)]
# HHINCOM0 col 47 is the sum of 48:63
geo.dt[ , c(48:63) := .SD / HHINCOM0, .SDcols = c(48:63)]
# ACSTOTHU col 68 is the sum of 69:71
geo.dt[ , c(69:71) := .SD / ACSTOTHU, .SDcols = c(69:71)]
# ACSAVGHHSZ is average household size. Needs to be scaled.
geo.dt[ , ACSAVGHHSZ := scale(ACSAVGHHSZ)]
# UNITS0 = 76:81
geo.dt[ , c(76:81) := .SD / UNITS0, .SDcols = c(76:81)]
# MDYRBLT0 needs to be scaled, median year built
geo.dt[ , MDYRBLT0 := scale(MDYRBLT0)]
# VALOWNR0 83 is counts of 84:90
geo.dt[ , c(84:90) := .SD / VALOWNR0, .SDcols = c(84:90)]
# MEDVALO0 is median value of owner occupied so scale it
geo.dt[ , MEDVALO0 := scale(MEDVALO0)]
# AGGVALO0 is avg value of owner occupied so scale it
geo.dt[ , AGGVALO0 := scale(AGGVALO0)]
# GROSSRNT is 94:100
geo.dt[ , c(94:100) := .SD / GROSSRNT0, .SDcols = c(94:100)]
# MDGRSRN0 is median gross rent and needs to be scaled
geo.dt[ , MDGRSRN0 := scale(MDGRSRN0)]
print(paste("Took",Sys.time()-start_time,"seconds to complete."))
lift.perf <- performance(pr,"lift","rpp")
logit.mod <- glm(isPurchase ~ Brand + ProductGroup + MSRP + OfferPrice + PC1 + PC2 + PC3 + PC4 + PC5,
data=train.dt, family = binomial(link="logit"))
library(dplyr)
library(ROCR)
library(data.table)
library(lubridate)
source("Functions.R")
start_time <- Sys.time()
sol.dt <- fread("MarketingCampaignSolicitations.txt",sep="\t",header=TRUE)
geo.dt <- fread("MarketingCampaignGeo+LandArea.txt",sep="\t",header=TRUE)
geokey.dt <- fread("GeoKey.txt",sep="\t",header=FALSE)
dateVars <- c("MailDate","PurchaseDate")
sol.dt[ , (dateVars) := lapply(.SD,parse_date_time,c('ymd HMS')), .SDcols = dateVars]
rm(dateVars)
sol.dt[ , RecordNumber:= as.character(RecordNumber)]
geo.dt[ , RecordNumber := as.character(RecordNumber)]
geo.dt[ , names(geo.dt)[-1] := lapply(.SD,as.numeric), .SDcols = names(geo.dt)[-1]]
sol.dt[,isPurchase := !is.na(PurchaseDate)]
sol.dt[,daysToPurchase := as.numeric(as_date(PurchaseDate) - as_date(MailDate))]
geo.dt <- na.omit(geo.dt)
geo.dt <- subset(geo.dt, subset = (ACSTTPOP0 != 0 &
ACSMALES != 0 &
ACSFEMALES != 0 &
MARSTAT0 != 0 &
RACE0 != 0 &
FMHH0 != 0 &
TOTHH0 != 0 &
EDUCAT0 != 0 &
HHINCOM0 != 0 &
ACSTOTHU != 0 &
UNITS0 != 0 &
VALOWNR0 != 0 &
GROSSRNT0 != 0))
geo.dt[ , names(geo.dt)[4:14] := .SD / ACSTTPOP0, .SDcols = names(geo.dt)[4:14]]
geo.dt[ , ACSMALES := ACSMALES / (ACSMALES + ACSFEMALES)]
geo.dt[ , ACSFEMALES := 1 - ACSMALES]
geo.dt[ , names(geo.dt)[18:21] := .SD / MARSTAT0, .SDcols = names(geo.dt)[18:21]]
geo.dt[ , c(23:31) := .SD / RACE0, .SDcols = c(23:31)]
geo.dt[ , c(34:36) := .SD / FMHH0, .SDcols = c(34:36)]
geo.dt[ , SINGLE0 := SINGLE0 / NOFMHH0]
setcolorder(geo.dt,c(1:33,37,34:36,38:101))
geo.dt[ , FMHH0 := FMHH0 / TOTHH0]
geo.dt[ , NOFMHH0 := 1 - FMHH0]
geo.dt[ , c(40:46) := .SD / EDUCAT0, .SDcols = c(40:46)]
geo.dt[ , c(48:63) := .SD / HHINCOM0, .SDcols = c(48:63)]
geo.dt[ , c(69:71) := .SD / ACSTOTHU, .SDcols = c(69:71)]
geo.dt[ , c(76:81) := .SD / UNITS0, .SDcols = c(76:81)]
geo.dt[ , c(84:90) := .SD / VALOWNR0, .SDcols = c(84:90)]
geo.dt[ , c(94:100) := .SD / GROSSRNT0, .SDcols = c(94:100)]
summary(geo.dt)
scaleVars <- c('LANDAREA', 'ACSTTPOP0', 'MARSTAT0', 'RACE0', 'TOTHH0', 'EDUCAT0', 'HHINCOM0', 'MEDHHIN0', 'AGGHHIN0', 'PCAPIN0',
'MDFAMIN0', 'ACSTOTHU', 'ACSAVGHHSZ', 'ACSAVGSZOWN', 'ACSAVGSZRNT', 'UNITS0', 'MDYRBLT0', 'VALOWNR0', 'MEDVALO0',
'AGGVALO0', 'GROSSRNT0', 'MDGRSRN0')
geo.dt[ , (scaleVars) := lapply(.SD,scale), .SDcols = scaleVars]
rm(scaleVars)
summary(geo.dt)
summary(geo.dt)
geo.dt <- na.omit(geo.dt)
geo.pca <- prcomp(geo.dt[,c(2:4,6:15,17:101)], center = FALSE, scale. = FALSE)
summary(geo.pca)
plot(geo.pca, type="l")
geo.pca$sdev^2
percentonly.pca <- prcomp(geo.dt[,c(4,6:15,18:21,23:31,33:38,40:46,48:63,69:71,76:81,84:90,94:100)], center = FALSE, scale. = FALSE)
summary(percentonly.pca)
plot(percentonly.pca, type="l")
pcaFactors.dt <- cbind(geo.dt[,"RecordNumber"],geo.pca$x)
pcaFactors.dt[,c(7:length(names(pcaFactors.dt))) := NULL]
setkey(sol.dt,RecordNumber)
setkey(pcaFactors.dt,RecordNumber)
analyVars <- merge(sol.dt,pcaFactors.dt,all=FALSE)
setkey(sol.dt,NULL)
setkey(pcaFactors.dt,NULL)
summary(analyVars)
analyVars <- na.omit(analyVars,
cols = c("Brand", "MSRP", "ProductGroup", "ProductDetail", "OfferPrice",
"isPurchase","PC1","PC2","PC3","PC4","PC5"))
analyVars$OfferPrice <- factor(analyVars$OfferPrice)
analyVars$Brand <- factor(analyVars$Brand)
analyVars$ProductGroup <- factor(analyVars$ProductGroup)
analyVars$ProductDetail <- factor(analyVars$ProductDetail)
analyVars$ProductGroup <- relevel(analyVars$ProductGroup, ref = "Washer")
set.seed(42)
train.dt <- copy(sample_n(analyVars,0.8 * length(analyVars[[1]])))
test.dt <- anti_join(analyVars,train.dt)
logit.mod <- glm(isPurchase ~ Brand + ProductGroup + ProductDetail + MSRP + OfferPrice + PC1 + PC2 + PC3 + PC4 + PC5,
data=train.dt, family = binomial(link="logit"))
summary(logit.mod)
logit.mod <- glm(isPurchase ~ Brand + ProductGroup + MSRP + OfferPrice + PC1 + PC2 + PC3 + PC4 + PC5,
data=train.dt, family = binomial(link="logit"))
summary(logit.mod)
data.frame(OddsRatio = exp(coef(logit.mod)))
fitted.results <- predict(logit.mod,newdata = train.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(train.dt$isPurchase))
summary(fitted.df)
rmse(fitted.df$trueValue, fitted.df$predValue)
mae(fitted.df$trueValue, fitted.df$predValue)
(misClasifyError <- mean(fitted.df$predValue != fitted.df$trueValue))
pr <- prediction(fitted.results, train.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
lift.perf <- performance(pr,"lift","rpp")
plot(lift.perf, main="Lift Curve", colorize = TRUE)
lift.perf <- performance(pr,"lift","rpp")
plot(lift.perf, main="Lift Curve", colorize = TRUE)
lift.perf <- performance(pr,"lift","rpp")
plot(sample(lift.perf,size=length(lift.perf)/100,replace=FALSE), main="Lift Curve")
length(lift.perf)
length(lift.perf)[[1]]
lift.perf
length(lift.perf$x.values)
length(lift.perf@x.values)
length(lift.perf@x.values[[1]])
plot(sample(lift.perf,size=length(lift.perf@x.values[[1]])/100,replace=FALSE), main="Lift Curve")
str(lift.perf)
lift.perf@x.values <- sample(lift.perf@x.values,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values <- sample(lift.perf@y.values,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve")
str(lift.perf)
lift.perf <- performance(pr,"lift","rpp")
lift.perf <- performance(pr,"lift","rpp")
str(lift.perf)
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve")
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve")
fitted.results <- predict(logit.mod,newdata = test.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(test.dt$isPurchase))
summary(fitted.df)
rmse(fitted.df$trueValue, fitted.df$predValue)
mae(fitted.df$trueValue, fitted.df$predValue)
(misClasifyError <- mean(fitted.df$predValue != fitted.df$trueValue))
pr <- prediction(fitted.results, test.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve")
abline(h = 1, col = "red")
plot(lift.perf, main="Lift Curve", ylim=c(0,5))
abline(h = 1, col = "red")
fitted.results <- predict(logit.mod,newdata = train.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(train.dt$isPurchase))
pr <- prediction(fitted.results, train.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve", ylim=c(0,5))
abline(h = 1, col = "red")
summary(percentonly.pca)
percentonly.pca$sdev^2
geo.pca$rotation
View(geo.pca$rotation)
View(geo.pca$rotation[,1:5])
biplot(geo.pca, scale = 0)
plot(geo.pca, type="l")
abline(h = 1)
abline(h = 1, col="red")
options(scipen = 999)
geo.pca <- prcomp(geo.dt[,c(2:4,6:15,17:101)], center = FALSE, scale. = FALSE)
summary(geo.pca)
plot(geo.pca, type="l")
abline(h = 1, col="red")
geo.pca$sdev^2
View(geo.pca$rotation[,1:5])
logit.mod2 <- glm(isPurchase ~ Brand + ProductGroup + MSRP + OfferPrice + PC1 + PC2 + PC3 + PC4 + PC5,
data=train.dt, family = binomial(link="logit"))
summary(logit.mod2)
data.frame(OddsRatio = exp(coef(logit.mod2)))
fitted.results <- predict(logit.mod2,newdata = train.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(train.dt$isPurchase))
summary(fitted.df)
pr <- prediction(fitted.results, train.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve", ylim=c(0,5))
abline(h = 1, col = "red")
fitted.results <- predict(logit.mod,newdata = test.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(test.dt$isPurchase))
summary(fitted.df)
rmse(fitted.df$trueValue, fitted.df$predValue)
mae(fitted.df$trueValue, fitted.df$predValue)
(misClasifyError <- mean(fitted.df$predValue != fitted.df$trueValue))
pr <- prediction(fitted.results, test.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve", ylim=c(0,5))
abline(h = 1, col = "red")
?prcomp
length(sol.dt[is.na(PurchaseDate)==FALSE])
length(sol.dt[is.na(PurchaseDate)==FALSE,PurchaseDate])
length(sol.dt[is.na(PurchaseDate)==FALSE,PurchaseDate]) / length(sol.dt[is.na(MailDate)==FALSE,MailDate])
summary(logit.mod2)
source('~/MSA/Fall 2017/LogisticRegressionAssignment/SampsonRegressionAnalysis.R')
data.frame(OddsRatio = exp(coef(logit.mod2)))
mod2.oddsratio <- data.frame(OddsRatio = exp(coef(logit.mod2)))
?arrange
mod2.oddsratio <- arrange(mod2.oddsratio)
mod2.oddsratio
mod2.oddsratio <- arrange(mod2.oddsratio, OddsRatio)
mod2.oddsratio
mod2.oddsratio <- arrange(mod2.oddsratio, OddsRatio, desc())
mod2.oddsratio <- arrange(mod2.oddsratio, desc(OddsRatio))
mod2.oddsratio
mod2.oddsratio <- data.frame(OddsRatio = exp(coef(logit.mod2)))
mod2.oddsratio
mod2.oddsratio <- mod2.oddsratio %>% mutate(Name = row.names(mod2.oddsratio))
mod2.oddsratio
mod2.oddsratio <- mod2.oddsratio %>% mutate(Name = row.names(mod2.oddsratio), OddsRatio = OddsRatio)
mod2.oddsratio
mod2.oddsratio <- data.frame(OddsRatio = exp(coef(logit.mod2)))
mod2.oddsratio <- mod2.oddsratio %>% mutate(Name = row.names(mod2.oddsratio), OddsRatio = OddsRatio)
mod2.oddsratio
mod2.oddsratio <- data.frame(OddsRatio = exp(coef(logit.mod2)))
mod2.oddsratio <- mod2.oddsratio %>% mutate(Name = row.names(mod2.oddsratio)) %>% select(Name,OddsRatio)
mod2.oddsratio <- data.frame(OddsRatio = exp(coef(logit.mod2)))
mod2.oddsratio <- mod2.oddsratio %>% mutate(Name = row.names(mod2.oddsratio)) %>% select(Name,OddsRatio)
mod2.oddsratio
mod2.oddsratio <- arrange(mod2.oddsratio, desc(OddsRatio))
mod2.oddsratio
?max
View(pcaFactors.dt)
PC1 <- pcaFactors.dt[order(-rank(PC1))]
View(PC1)
PC1 <- geo.pcs$rotation[order(-rank(PC1))]
PC1 <- geo.pca$rotation[order(-rank(PC1))]
PC1 <- geo.pca$rotation %>% arrange(desc(PC1))
PC1 <- as.data.table(geo.pca$rotation) %>% arrange(desc(PC1))
View(PC1)
PC1 <- as.data.table(geo.pca$rotation[,1:5]) %>% arrange(desc(PC1))
View(geo.pca$rotation[,1:5])
PCA.values <- geo.pca$rotation[,1:5]
View(PCA.values)
PCA.values <- cbind(row.names(PCA.values),PCA.values)
PCA.values <- as.data.frame(PCA.values)
PC1 <- PCA.values %>% arrange(desc(PC1))
View(PC1)
PC1 <- PCA.values %>% arrange(desc(PC1)) %>% select(V1,PC1) %>% head()
?head
PC1 <- PCA.values %>% arrange(desc(PC1)) %>% select(V1,PC1) %>% head(n=10L)
PC1 <- PCA.values %>% arrange(desc(abs(PC1))) %>% select(V1,PC1) %>% head(n=10L)
?abs
PC1 <- PCA.values %>% arrange(desc(abs(as.numeric(PC1)))) %>% select(V1,PC1) %>% head(n=10L)
PC1 <- PCA.values %>% arrange(desc(abs(as.numeric(PC2)))) %>% select(V1,PC2) %>% head(n=10L)
PC1 <- PCA.values %>% arrange(desc(abs(as.numeric(PC1)))) %>% select(V1,PC1) %>% head(n=10L)
PC2 <- PCA.values %>% arrange(desc(abs(as.numeric(PC2)))) %>% select(V1,PC2) %>% head(n=10L)
View(PC2)
PCA.values <- as.data.frame(PCA.values)
?which
?which.max
PCA.values <- PCA.values %>% mutate(absPC1 = abs(PC1), absPC2 = abs(PC2),
absPC3 = abs(PC3), absPC4 = abs(PC4),
absPC5 = abs(PC5))
PCA.values <- PCA.values %>% mutate(absPC1 = abs(as.numeric(PC1)), absPC2 = abs(as.numeric(PC2)),
absPC3 = abs(as.numeric(PC3)), absPC4 = abs(as.numeric(PC4)),
absPC5 = abs(as.numeric(PC5)))
PCA.values$PC1
PCA.values$PC1$vales
PCA.values$PC1$values
levels(PCA.values$PC1)
PCA.values <- PCA.values %>% mutate(absPC1 = levels(as.numeric(PC1)), absPC2 = levels(as.numeric(PC2)),
absPC3 = levels(as.numeric(PC3)), absPC4 = levels(as.numeric(PC4)),
absPC5 = levels(as.numeric(PC5)))
PCA.values <- PCA.values %>% mutate(absPC1 = levels(PC1), absPC2 = levels(PC2),
absPC3 = levels(PC3), absPC4 = levels(PC4),
absPC5 = levels(PC5))
mode(levels(PCA.values$PC1))
str(PCA.values$PC1)
as.data.frame?
?as.data.frame
PCA.values <- as.data.frame(PCA.values, stringsAsFactors = FALSE)
str(PCA.values)
PCA.values <- geo.pca$rotation[,1:5]
PCA.values <- cbind(row.names(PCA.values),PCA.values)
PCA.values <- as.data.frame(PCA.values, stringsAsFactors = FALSE)
str(PCA.values)
PCA.values <- PCA.values %>% mutate(PC1 = as.numeric(PC1))
str(PCA.values)
PCA.values <- PCA.values %>% mutate(PC1 = as.numeric(PC1),
PC2 = as.numeric(PC2),
PC3 = as.numeric(PC3),
PC4 = as.numeric(PC4),
PC5 = as.numeric(PC5))
str(PCA.values)
PC1 <- PCA.values %>% arrange(desc(abs(PC1))) %>% select(V1,PC1) %>% head(n=10L)
PC2 <- PCA.values %>% arrange(desc(abs(PC2))) %>% select(V1,PC2) %>% head(n=10L)
PC1 <- PCA.values %>% arrange(desc(abs(PC1))) %>% select(V1,PC1) %>% head(n=10L)
PC2 <- PCA.values %>% arrange(desc(abs(PC2))) %>% select(V1,PC2) %>% head(n=10L)
PC3 <- PCA.values %>% arrange(desc(abs(PC3))) %>% select(V1,PC3) %>% head(n=10L)
PC4 <- PCA.values %>% arrange(desc(abs(PC4))) %>% select(V1,PC4) %>% head(n=10L)
PC5 <- PCA.values %>% arrange(desc(abs(PC5))) %>% select(V1,PC5) %>% head(n=10L)
PC5 <- PCA.values %>% arrange(desc(abs(PC5))) %>% select(V5,PC5) %>% head(n=10L)
PC1 <- PCA.values %>% arrange(desc(abs(PC1))) %>% select(V1 = V1,PC1) %>% head(n=10L)
PC2 <- PCA.values %>% arrange(desc(abs(PC2))) %>% select(V2 = V1,PC2) %>% head(n=10L)
PC3 <- PCA.values %>% arrange(desc(abs(PC3))) %>% select(V3 = V1,PC3) %>% head(n=10L)
PC4 <- PCA.values %>% arrange(desc(abs(PC4))) %>% select(V4 = V1,PC4) %>% head(n=10L)
PC5 <- PCA.values %>% arrange(desc(abs(PC5))) %>% select(V5 = V1,PC5) %>% head(n=10L)
PCtable <- cbind(PC1,PC2,PC3,PC4,PC5)
PCtable
mod2.oddsratio <- mod2.oddsratio %>% mutate(diff = 1-OddsRatio)
mod2.oddsratio
mod2.oddsratio <- mod2.oddsratio %>% mutate(diff = OddsRatio - 1)
mod2.oddsratio
View(geokey.dt)
fitted.results <- predict(logit.mod,newdata = test.dt,type='response')
fitted.df <- data.frame(prediction = fitted.results,
predValue = ifelse(fitted.results > 0.5, 1, 0),
trueValue = as.numeric(test.dt$isPurchase))
summary(fitted.df)
pr <- prediction(fitted.results, test.dt$isPurchase)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
?abline
abline(a=0,b=1)
abline(a=0,b=1,col="red")
lift.perf <- performance(pr,"lift","rpp")
lift.perf@x.values$num <- sample(lift.perf@x.values$num,length(lift.perf@x.values)/100,replace = FALSE)
lift.perf@y.values$num <- sample(lift.perf@y.values$num,length(lift.perf@y.values)/100,replace = FALSE)
plot(lift.perf, main="Lift Curve", ylim=c(0,5))
abline(h = 1, col = "red")
plot(prf, main="ROC Curve")
abline(a=0,b=1,col="red")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
auc()
